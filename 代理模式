代理模式（Proxy Pattern）：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英文叫做 Proxy 或 Surrogate，它是一种对象结构型模式。
代理模式有三个关键要素，它们分别是：

    主题（Subject）：定义“操作/活动/任务”的接口类。
    真实主题（RealSubject）：真正完成“操作/活动/任务”的具体类。
    代理主题（ProxySubject）：代替真实主题完成“操作/活动/任务”的代理类。
模型说明

代理对象可以在客户端和目标对象之间起到中间调和的作用，并且可以通过代理对象隐藏不希望被客户端看到的内容和服务，或者添加客户需要的额外服务。

在实现生活中能找到非常的代理模式的模型：火车票/机票的代售点；银行支票在市场交易中用来代替现金，并提供对签发人账号上资金的控制；代表公司出席一些商务会议。
代理模式的优点

    代理模式能够协调调用者和被调用者，在一定程度上降低了系统的耦合度。
    可以灵活地隐藏被代理对象的部分功能和服务，也增加额外的功能和服务。

代理模式的缺点

    由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。
    实现代理模式需要额外的工作，有些代理模式的实现非常复杂。

应用场景

（1）不想或者不能直接引用一个对象时

如在移动端加载网页信息时，因为下载真实大图比较耗费流量和性能，可以用一个小图代替进行渲染（用一个代理对象去下载小图），在真正点击图片时，才去下载大图，显示大图效果。还有 HTML 中的占位符，其实也是代理的思想。

（2）想对一个对象的功能进行加强时

如在字体（Font）渲染时，对粗体（BoldFont）进行渲染时，可使用字体 Font 对象进行代理，只要在对 Font 进行渲染后，进行一步加粗的操作即可。

（3）各种特殊用途的代理：远程代理、虚拟代理、Copy-on-Write 代理、保护（Protect or Access）代理、Cache 代理、防火墙（Firewall）代理、同步化（Synchronization）代理、智能引用（Smart Reference）代理。
